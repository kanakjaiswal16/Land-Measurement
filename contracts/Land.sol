/*
Flow of Contract :
1. Admin or owner of contract will assign Inspector who will measure land.
2. All the users(owner of the land) have to link their address to their Aadhaar.
3. Only one Address can be linked to one Aadhaar.
4. Once Aadhar is linked, user can measure his land.
5. Inspector will measure the land of owner and write coordinates of land on blockchain along with owner's Aadhar Hash generated by 'keccak256' and timestamp.
6. User will be given Land Id to check the details of land.
7. Anyone having Land ID can check current Owner of land and all previous Owner and previous Inspector of Land. (All the details of Owner and Inspector will be Hash of their Aadhar Card)
*/

//SPDX-License-Identifier:MIT

pragma solidity ^0.8.0;

struct land {
    uint land_id;
    string coordinates;
    bytes32 LastInspector;
    bytes32 CurrentOwner;
    uint timestamp;
}

contract Land {
    land l1;
    uint public num;
    address public owner;

    mapping(uint => bytes32[]) inspectorListHash;
    mapping(uint => bytes32[]) PreviousOwnerHash;
    mapping(string => bool) landAdded;
    mapping(uint => land) LandRecords;
    mapping(string => land) LandRecordsString;
    mapping(uint => address[]) inspectorList;
    mapping(address => bool) public isInspector;
    mapping(uint => address[]) PreviousOwner;
    mapping(string => uint) alreadyRegistered;
    mapping(bytes32 => uint) AdharLink;
    mapping(uint => bytes32) AdharTOHash;
    mapping(address => bool) OnlyOneTime;
    mapping(address => bytes32) public Hash;

    constructor() {
        owner = msg.sender;
        num = 1200;
    }

    //USER
    // To link Aadhar Card to Address
    function linkAadhar(uint _aadharNo) public onlyTwelveDigits(_aadharNo) {
        bytes32 AadharHash;
        AadharHash = keccak256(abi.encodePacked(_aadharNo));
        require(
            AdharLink[AadharHash] == 0,
            "This aadhar number has already been linked"
        );
        require(
            OnlyOneTime[msg.sender] == false,
            "One Address can only be link to one Aadhar"
        );
        AdharLink[AadharHash] = _aadharNo;
        AdharTOHash[_aadharNo] = AadharHash;
        OnlyOneTime[msg.sender] = true;
        Hash[msg.sender] = AadharHash;
    }

    //INSPECTOR
    //TO fetch coordinates of land from front-end and write it on blockchain
    function MeasureLand(
        string memory coordinates,
        address _CurrentOwner
    ) public {
        address _inspector = msg.sender;
        require(
            isInspector[msg.sender] == true,
            "Only Inspector can access this function"
        );
        require(
            OnlyOneTime[_CurrentOwner] == true &&
                OnlyOneTime[_inspector] == true,
            "Aadhar must be linked"
        );
        require(
            LandRecordsString[coordinates].CurrentOwner != Hash[_CurrentOwner],
            "You are already owner"
        );
        require(
            _inspector != _CurrentOwner,
            "inspector can't measure his own land"
        );
        uint temp = num;
        if (landAdded[coordinates] == true) {
            num = alreadyRegistered[coordinates];
        }
        l1.land_id = num;
        l1.coordinates = coordinates;
        l1.LastInspector = Hash[_inspector];
        l1.CurrentOwner = Hash[_CurrentOwner];
        l1.timestamp = block.timestamp;

        inspectorListHash[num].push(Hash[_inspector]);
        PreviousOwnerHash[num].push(Hash[_CurrentOwner]);
        inspectorList[num].push(_inspector);
        PreviousOwner[num].push(_CurrentOwner);
        LandRecords[num] = l1;
        LandRecordsString[coordinates] = l1;

        if (landAdded[coordinates] == false) {
            alreadyRegistered[coordinates] = num;
            num++;
        }
        if (landAdded[coordinates] == true) {
            num = temp;
        }
        landAdded[coordinates] = true;
    }

    //To Check all owners which measure that particular land
    function CheckPreviousOwner(
        uint _num
    ) public view returns (bytes32[] memory) {
        return PreviousOwnerHash[_num];
    }

    //To Check all Inspectors which measure that particular land
    function CheckPreviousInspector(
        uint _num
    ) public view returns (bytes32[] memory) {
        return inspectorListHash[_num];
    }

    function FetchLandRecords(uint x) public view returns (land memory) {
        return LandRecords[x];
    }

    function FetchLandRecordsString(
        string memory x
    ) public view returns (land memory) {
        return LandRecordsString[x];
    }

    function Owner() public view onlyOwner returns (bool) {
        return true;
    }

    function CheckInspector() public view returns (bool) {
        return isInspector[msg.sender];
    }

    //ADMIN
    // To add Inspector
    function addInspector(
        address x,
        uint _aadharNo
    ) public onlyTwelveDigits(_aadharNo) onlyOwner {
        require(owner != x, "Owner can't be inspector");
        require(
            isInspector[x] == false,
            "You have already assigned it as Inspector"
        );
        bytes32 AadharHash;
        AadharHash = keccak256(abi.encodePacked(_aadharNo));
        if (OnlyOneTime[x] == false) {
            AdharLink[AadharHash] = _aadharNo;
            AdharTOHash[_aadharNo] = AadharHash;
            OnlyOneTime[x] = true;
            Hash[x] = AadharHash;
        }
        isInspector[x] = true;
    }

    // Remove Inspector
    function removeInspector(address x) public onlyOwner {
        require(isInspector[x] == true, "Address is not assigned as Inspector");
        isInspector[x] = false;
    }

    //Modifiers
    modifier onlyTwelveDigits(uint256 _value) {
        require(
            _value >= 1e11 && _value < 1e12,
            "Input value must be a 12-digit number"
        );
        _;
    }
    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner has Access");
        _;
    }
}
